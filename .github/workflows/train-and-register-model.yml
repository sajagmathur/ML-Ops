name: Train, Register, and Deploy Model
permissions:
  contents: write

on:
  push:
    branches: [Day10]

jobs:
  train-model:
    runs-on: IceCream

    steps:
      - uses: actions/checkout@v3

      - name: Create Python environment
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          if (-not (Test-Path $envPath)) {
            python -m venv $envPath
          }

      - name: Train Model
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          & "$envPath\Scripts\Activate.ps1"
          pip install --quiet pandas scikit-learn joblib
          Set-Location -Path Day10/workshop
          python 1_train_model.py

      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            Day10/workshop/model.pkl
            Day10/workshop/test_data.pkl
      - name: Commit and push model.pkl to repo
        shell: powershell
        run: |
          Set-Location -Path Day10/workshop
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add model.pkl test_data.pkl
          git commit -m "Add trained model artifacts"
          git push
  register-model:
    runs-on: IceCream
    needs: train-model

    steps:
      - uses: actions/checkout@v3

      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: Day10/workshop

      - name: Create Python environment
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          if (-not (Test-Path $envPath)) {
            python -m venv $envPath
          }

      - name: Register Model with MLflow
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          & "$envPath\Scripts\Activate.ps1"
          pip install --quiet mlflow scikit-learn joblib
          Set-Location -Path Day10/workshop
          python 2_register_model.py

  run-app:
    runs-on: IceCream
    needs: register-model

    steps:
      - uses: actions/checkout@v3

      - name: Pull latest changes (including model.pkl)
        shell: powershell
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "GitHub Actions"
          git pull origin Day10

      - name: List files in working directory (debug)
        shell: powershell
        run: |
          Set-Location -Path Day10/workshop
          Get-ChildItem -Recurse

      - name: Setup Python environment for app
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          if (-not (Test-Path $envPath)) {
            python -m venv $envPath
          }
          & "$envPath\Scripts\Activate.ps1"
          pip install --quiet fastapi uvicorn numpy joblib

      - name: Check if model.pkl exists
        shell: powershell
        run: |
          if (-not (Test-Path "Day10/workshop/model.pkl")) {
            Write-Error "model.pkl not found, aborting"
            exit 1
          } else {
            Write-Host "model.pkl found"
          }

      - name: Run FastAPI app with uvicorn (logs to file)
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          & "$envPath\Scripts\Activate.ps1"
          Set-Location -Path Day10/workshop

          Start-Process -NoNewWindow -FilePath uvicorn -ArgumentList "app:app --host 0.0.0.0 --port 5001" -RedirectStandardOutput uvicorn.log -RedirectStandardError uvicorn-error.log -PassThru

      - name: Wait for app to start and check readiness
        shell: powershell
        run: |
          $maxRetries = 10
          $uri = "http://localhost:5001/"
          $success = $false
          for ($i = 1; $i -le $maxRetries; $i++) {
            try {
              Invoke-RestMethod -Uri $uri -TimeoutSec 5 | Out-Null
              Write-Host "App is running!"
              $success = $true
              break
            } catch {
              Write-Host "Attempt ${i}: App not responding yet, retrying in 3 seconds..."
              Start-Sleep -Seconds 3
            }
          }
          if (-not $success) {
            Write-Host "App did not respond after $maxRetries attempts. Dumping uvicorn logs:"
            Get-Content uvicorn.log
            Get-Content uvicorn-error.log
            exit 1
          }