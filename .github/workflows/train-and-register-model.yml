name: Train, Register, and Deploy Model

permissions:
  contents: write

on:
  push:
    branches: [Day10, main]
  workflow_dispatch:

jobs:
  train-model:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Create Python environment
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          if (-not (Test-Path $envPath)) {
            python -m venv $envPath
          }

      - name: Install Python dependencies
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          & "$envPath\Scripts\Activate.ps1"
          Set-Location -Path Day10/workshop
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train Model
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          & "$envPath\Scripts\Activate.ps1"
          pip install --quiet pandas scikit-learn joblib
          Set-Location -Path Day10/workshop
          python trainmodel.py

      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            Day10/workshop/model.pkl
            Day10/workshop/test_data.pkl

      - name: Commit and push model.pkl to repo
        shell: powershell
        run: |
          Set-Location -Path Day10/workshop
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add model.pkl test_data.pkl
          git commit -m "Add trained model artifacts"
          git push

  register-model:
    runs-on: IceCream
    needs: train-model

    steps:
      - uses: actions/checkout@v3

      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: Day10/workshop

      - name: Create Python environment
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          if (-not (Test-Path $envPath)) {
            python -m venv $envPath
          }

      - name: Register Model with MLflow
        shell: powershell
        run: |
          $envPath = "$env:USERPROFILE\actions-cache\env"
          & "$envPath\Scripts\Activate.ps1"
          pip install --quiet mlflow scikit-learn joblib
          Set-Location -Path Day10/workshop
          python registermodel.py

  run-fastapi:
    
    runs-on: ubuntu-latest
    needs: register-model

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Day10/workshop/requirements.txt

      - name: Run FastAPI app
        run: python app.py
        working-directory: Day10/workshop

  build-and-push-to-dockerhub:
    runs-on: ubuntu-latest
    needs: run-fastapi

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/icecream-api:latest -f Day10/workshop/Dockerfile Day10/workshop

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/icecream-api:latest

  deploy-to-minikube:
    runs-on: ubuntu-latest
    needs: build-and-push-to-dockerhub  # Ensure build-and-push is completed before deployment
    #needs: build-and-push  # Ensure build-and-push is completed before deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Minikube
        run: |
          # Install Minikube
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/

          # Start Minikube with Docker driver (for GitHub-hosted runners, Docker must be available)
          minikube start --driver=docker

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.31.1'

      - name: Set kubectl context for Minikube
        run: |
          kubectl config use-context minikube
    
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image from Docker Hub
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/icecream-api:latest

      - name: Load Docker image into Minikube
        run: |
          minikube image load ${{ secrets.DOCKER_USERNAME }}/icecream-api:latest

      - name: Deploy to Minikube
        run: |
          # Apply Kubernetes configurations
          kubectl apply -f Day10/workshop/deployment.yaml --validate=false
          kubectl apply -f Day10/workshop/service.yaml --validate=false
      - name: Wait for ice-cream-api deployment rollout
        run: |
          kubectl rollout status deployment/ice-cream-api --timeout=300s -n default
      
      - name: Check Deployment Status
        run: |
          kubectl get deployments -n default
          kubectl get pods -n default
          kubectl describe deployment ice-cream-api -n default
      - name: Get Pod Name
        id: pod_name
        run: |
          # Extract the pod name dynamically based on the deployment
          POD_NAME=$(kubectl get pods -n default -l app=ice-cream-api -o jsonpath='{.items[0].metadata.name}')
          echo "Pod Name is $POD_NAME"
          echo "::set-output name=pod_name::$POD_NAME"

      - name: Wait for Pod to be Running
        run: |
          kubectl wait --for=condition=ready pod -l app=ice-cream-api -n default --timeout=300s

      - name: Get Pod Logs
        run: |
          kubectl logs ${{ steps.pod_name.outputs.pod_name }} -n default

      - name: Check Service Status
        run: |
          kubectl get svc -n default
          kubectl describe svc ice-cream-service -n default

 # Extract and Push the Final Container from Minikube to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract the Final Container from Minikube and Push to Docker Hub
        run: |
          # Get the image name used by the deployment
          IMAGE_NAME=$(kubectl get deployment ice-cream-api -n default -o=jsonpath='{.spec.template.spec.containers[0].image}')
          
          # Ensure the image is available in Minikube's local Docker
          eval $(minikube docker-env)

          # Tag the deployed container with your Docker Hub username
          docker tag $IMAGE_NAME ${{ secrets.DOCKER_USERNAME }}/ice-cream-container:final

          # Push the final container to Docker Hub
          docker push ${{ secrets.DOCKER_USERNAME }}/ice-cream-container:final
